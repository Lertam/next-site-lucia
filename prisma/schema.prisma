// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  RETOUCHER
  ADMIN
}

model User {
  id             String    @id
  sessions       Session[]
  login          String    @unique
  email          String    @unique
  hashedPassword String
  role           UserRole  @default(USER)
  image          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  passwordResetToken PasswordResetToken[]
  SurveyVote         SurveyVote[]
  comments           NewsComment[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId])
}

model PasswordResetToken {
  userId  String   @id
  user    User     @relation(fields: [userId], references: [id])
  token   String   @unique
  expires DateTime
  used    Boolean  @default(false)

  @@index(fields: [userId, token])
}

model RetouchService {
  id          String @id
  title       String
  weight      Int    @default(0)
  description String @default("")
  image       String

  prices   RetouchPrice[]
  variants RetouchVariant[]
}

model RetouchPrice {
  id          String  @id
  title       String
  description String
  price       Int
  weight      Int     @default(0)
  express     Boolean @default(false)

  serviceId String
  service   RetouchService @relation(fields: [serviceId], references: [id])
}

model RetouchVariant {
  id          String  @id
  title       String
  description String
  weight      Int     @default(0)
  price       Int
  image       String
  withText    Boolean @default(false)
  withFiles   Boolean @default(false)

  serviceId String
  service   RetouchService @relation(fields: [serviceId], references: [id])
}

model Faq {
  id       String  @id
  question String
  answer   String
  weight   Int     @default(0)
  hidden   Boolean @default(false)
}

model News {
  id        String   @id
  title     String
  content   String   @db.Text
  image     String?
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  published Boolean  @default(false)

  surveyId String?
  survey   Survey? @relation(fields: [surveyId], references: [id])

  comments NewsComment[]
}

model Survey {
  id       String   @id
  title    String   @default("")
  text     String
  created  DateTime @default(now())
  finished Boolean  @default(false)

  news News[]

  variants SurveyVariant[]
}

model SurveyVariant {
  id   String @id
  text String

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id])

  votes SurveyVote[]
}

model SurveyVote {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  variantId String
  variant   SurveyVariant @relation(fields: [variantId], references: [id])

  @@id([userId, variantId])
}

model NewsComment {
  id     String @id
  newsId String
  news   News   @relation(fields: [newsId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  text    String
  created DateTime @default(now())
}

model ShopItem {
  id      Int   @id @default(autoincrement())
  name    String
  preview String
  source  String
  created DateTime @default(now())

  data Json

  categoryId String?
  category   ShopCategory? @relation(fields: [categoryId], references: [id])
}

model ShopCategory {
  id   String @id
  name String
  weight Int @default(0)

  items ShopItem[]
}
